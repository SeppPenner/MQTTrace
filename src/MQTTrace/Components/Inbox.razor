@using System.Text
@inject IMqttService MqttService
@implements IDisposable

<table class="table is-narrow is-hoverable is-fullwidth">
    <thead>
        <tr>
            <th>#</th>
            <th>Topic</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var message in Messages)
        {
            <tr @onclick="@(e => UpdateSelectedMessage(e, message.MessageId))">
                <th scope="row">@(message.MessageId)</th>
                <td>@(message.Message.Topic)</td>
                <td>@(message.Timestamp)</td>
            </tr>
        }
    </tbody>
</table>

<h2>Selected message details</h2>

Content: @(SelectedMessage != null ? Encoding.UTF8.GetString(SelectedMessage.Message.Payload) : "")

@code
{
    public List<ReceivedMessage> Messages { get; private set; }

    public ReceivedMessage SelectedMessage = null;

    protected override void OnInitialized()
    {
        Messages = MqttService.ReceivedMessages
                .TakeLast(10)
                .ToList();

        MqttService.MessageReceived += ReloadMessages;
    }

    private async Task ReloadMessages(ReceivedMessage receivedMessage)
    {
        await InvokeAsync(() =>
        {
            Messages = MqttService.ReceivedMessages
                .TakeLast(10)
                .ToList();

            StateHasChanged();

        });
    }

    private void UpdateSelectedMessage(MouseEventArgs e, int messageId)
    {
        SelectedMessage = Messages.Find(m => m.MessageId == messageId);
    }

    public void Dispose()
    {
        MqttService.MessageReceived -= ReloadMessages;
    }
}
