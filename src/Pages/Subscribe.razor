@page "/subscribe"
@using Services
@using Models
@inject IMqttService MqttService
@implements IDisposable

<h1>Subscribe</h1>

<input type="text" placeholder="Topic" @bind="NewTopic" />
<button @onclick="SubscribeNewTopicAsync">Subscribe</button>

<h2>Received messages</h2>

<table class="table table-sm">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Topic</th>
            <th scope="col">Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var message in Messages)
        {
            <tr>
                <th scope="row">@(message.MessageId)</th>
                <td>@(message.Message.Topic)</td>
                <td>@(message.Timestamp)</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    public string NewTopic { get; set; }

    public List<ReceivedMessage> Messages { get; private set; } = new List<ReceivedMessage>();

    public async Task SubscribeNewTopicAsync()
    {
        await MqttService.SubscribeAsync(NewTopic);
    }

    protected override void OnInitialized()
    {
        MqttService.MessageReceived += ReloadMessages;
    }

    private async Task ReloadMessages()
    {
        await InvokeAsync(() =>
        {
            Messages = MqttService.ReceivedMessages
                .TakeLast(10)
                .ToList();

            StateHasChanged();

        });
    }

    public void Dispose()
    {
        MqttService.MessageReceived -= ReloadMessages;
    }
}
